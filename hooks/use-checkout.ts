'use client'

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useCartStore } from '@/hooks/use-cart-store';
import { supabase } from '@/lib/supabase/client';
import { toast } from 'sonner';

// FastLane booking data interface
export interface BookingData {
  booking_date: string; // YYYY-MM-DD format
  booking_time: string; // HH:MM format
  customer_email: string;
  customer_phone: string;
  customer_whatsapp?: string;
  participant_count: number;
}

export function useCheckout() {
  const { items, totalPrice, clearCart } = useCartStore();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const router = useRouter();


  const handleBooking = async (vendorId: string, bookingData: BookingData) => {
    console.log('🚀 Starting booking creation...');
    console.log('📝 Vendor ID:', vendorId);
    console.log('📝 Booking data:', bookingData);
    console.log('📝 Cart items:', items);
    
    if (items.length === 0) {
        toast.error("No activities selected.");
        return;
    }

    // Validate required booking fields
    if (!bookingData.booking_date || !bookingData.booking_time || 
        !bookingData.customer_email || !bookingData.customer_phone) {
        toast.error("Please fill in all required booking information.");
        return;
    }

    setIsSubmitting(true);
    
    // 1. Structure the booking details from cart items
    const bookingDetails = items.map(item => ({
      activity_id: item.id, // using activity_id for the new schema
      quantity: item.quantity,
      name: item.title,
      price_at_purchase: item.price,
    }));
    
    console.log('📦 Booking details structured:', bookingDetails);
    
    const insertData = {
      vendor_id: vendorId,
      booking_details: bookingDetails,
      total_price: totalPrice(), // kept for future payment integration
      is_paid: false, // No payment in FastLane MVP
      booking_date: bookingData.booking_date,
      booking_time: bookingData.booking_time,
      customer_email: bookingData.customer_email,
      customer_phone: bookingData.customer_phone,
      customer_whatsapp: bookingData.customer_whatsapp,
      participant_count: bookingData.participant_count,
      // booking_number will be auto-generated by the database trigger
    };
    
    console.log('💾 Insert data:', insertData);
    
    // 2. Insert the new booking into the database
    const { data, error } = await supabase
      .from('bookings')
      .insert(insertData)
      .select('id, booking_number')
      .single();

    if (error) {
      console.error('❌ Database insert error:', error);
      toast.error('Failed to create booking. Please try again.');
      console.error(error);
      setIsSubmitting(false);
      return;
    }

    console.log('✅ Booking created successfully:', data);

    // 3. On success, clear the cart and redirect to the booking confirmation page
    clearCart();
    toast.success(`Booking confirmed! Reference: ${data.booking_number || data.id}`);
    router.push(`/order/${data.id}`); // keeping existing route structure
    setIsSubmitting(false);
  };

  // Legacy method for backward compatibility
  const handleCheckout = async (vendorId: string) => {
    toast.error("Please use the new booking flow with date and contact information.");
  };

  return { isSubmitting, handleBooking, handleCheckout };
} 